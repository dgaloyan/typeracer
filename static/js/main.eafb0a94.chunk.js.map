{"version":3,"sources":["components/timer/formatTime.js","components/timer/Timer.js","withAppContainer.js","commons/highlight.js","components/board/Text.js","components/board/InputText.js","commons/Loader.js","components/board/Stats.js","components/board/Board.js","app/TextProvider.js","app/AppContainer.js","app/PercentageAnalyser.js","app/WPMAnalyser.js","app/TextMatchingStrategy.js","app/MatchingStrategyFactory.js","app/Result.js","app/StatsRepository.js","app/UserRepository.js","components/auth/Register.js","components/auth/Login.js","commons/PrivateRoute.js","components/stats/Stats.js","commons/PublicRoute.js","App.js","serviceWorker.js","index.js"],"names":["formatTime","millis","seconds","Math","floor","h","m","s","substr","Timer","time","onFinish","start","finished","useState","countdown","setCountdown","intervalId","useRef","timer","startTimer","useCallback","current","setInterval","clearInterval","useEffect","className","AppContainerCtx","createContext","withAppContainer","Component","props","useContext","Highlighted","children","color","text","progress","highlightedText","setHighlightedText","startIndex","endIndex","substring","highlight","style","userSelect","InputText","onChange","disabled","value","onPaste","e","preventDefault","Loader","loading","margin","fontSize","Stats","stats","length","map","stat","key","href","appContainer","textMatchingStrategy","setTextMatchingStrategy","setLoading","isTimerStarted","setTimerStarted","setDisabled","setText","setProgress","errorText","setErrorText","inputText","setInputText","setStats","finishTime","setFinishTime","setFinished","matchingStrategyFactory","getMatchingStrategyFactory","timeToComplete","getTimeToComplete","Promise","resolve","then","a","getTextProvider","getText","texts","create","matchIndex","check","generateReport","analysers","getAnalysers","results","forEach","analyser","push","analyse","getStatsRepository","save","r","reset","textProvider","onClick","opacity","target","TextProvider","httpClient","this","AppContainer","statsRepository","userRepository","PercentageAnalyser","toFixed","WPMAnalyser","wpm","TextMatchingStrategy","bind","input","matchEndIndex","charAt","MatchingStrategyFactory","Result","data","error","StatsRepository","get","jsonData","currentUser","find","user","username","Date","put","savedStats","UserRepository","subscribers","isLoggedIn","localStorage","getItem","setItem","JSON","stringify","notify","response","removeItem","parse","event","func","Map","set","toString","delete","setUsername","setError","history","useHistory","register","getUserRepository","result","type","placeholder","login","userRepo","path","component","to","allStats","userStats","width","marginBottom","st","timeFromUrl","URL","window","location","searchParams","TIME_TO_COMPLETE","App","axios","setLoggedIn","subscribe","loginState","logout","Provider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eafb0a94.chunk.js","sourcesContent":["export const formatTime = (millis) => {\n    const seconds = Math.floor(millis / 1000)\n\n    const h = Math.floor(seconds / 60 / 60)\n    const m = Math.floor(seconds / 60) - (h * 60)\n    const s = seconds % 60\n\n    return ('0' + h).substr(-2) + ':' + ('0' + m).substr(-2) + ':' + ('0' + s).substr(-2)\n}\n","import React, {useCallback, useEffect, useRef, useState} from 'react'\nimport {formatTime}                                      from './formatTime'\nimport './styles.scss'\n\nconst Timer = ({time, onFinish, start, finished}) => {\n\n    const [countdown, setCountdown] = useState(formatTime(time))\n    const intervalId                = useRef(0)\n    const timer                     = useRef(time)\n\n    const startTimer = useCallback(() => {\n\n        intervalId.current = setInterval(() => {\n            timer.current -= 1000\n            setCountdown(formatTime(timer.current))\n\n            if (timer.current === 0) {\n                clearInterval(intervalId.current)\n                setCountdown(formatTime(timer.current))\n                onFinish(timer.current)\n            }\n\n        }, 1000)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [finished])\n\n    useEffect(() => {\n        setCountdown(formatTime(time))\n    }, [start, time])\n\n    useEffect(() => {\n        if (finished) {\n            clearInterval(intervalId.current)\n            onFinish(timer.current)\n            timer.current = time\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [finished])\n\n\n    useEffect(() => {\n\n        if (start && !finished) {\n            startTimer()\n        }\n\n    }, [start, finished, startTimer])\n\n    return (\n        <div className={'timer'}>\n            <span>{countdown}</span>\n        </div>\n    )\n}\n\nexport default Timer","import React, {createContext, useContext} from 'react'\n\nexport const AppContainerCtx = createContext({})\n\nexport const withAppContainer = (Component) => {\n\n    return (props) => {\n        return <Component {...props} {...useContext(AppContainerCtx)}/>\n    }\n}\n","import React from 'react'\n\nconst Highlighted = ({children, color}) => {\n    return (\n        <span className={'text' + color}>\n            {children}\n        </span>\n    )\n}\n\nexport const highlight = (text, startIndex, endIndex, color) => {\n\n    if (endIndex <= 0) {\n        return text\n    }\n\n    return (\n        <>\n            {text.substring(0, startIndex)}\n            <Highlighted color={color}>\n                {text.substring(startIndex, endIndex)}\n            </Highlighted>\n            {text.substring(endIndex)}\n        </>\n    )\n}","import React, {useEffect, useState} from 'react'\nimport {withAppContainer}           from '../../withAppContainer'\nimport {highlight}                  from '../../commons/highlight'\n\nconst Text = ({text, progress}) => {\n\n    const [highlightedText, setHighlightedText] = useState(text)\n\n    useEffect(() => {\n        setHighlightedText(highlight(text, 0, progress, 'Match'))\n    }, [text, progress])\n\n\n    return (\n        <div style={{userSelect: 'none'}}>\n            {highlightedText}\n        </div>\n    )\n}\n\nexport default withAppContainer(Text)","import React from 'react'\n\nconst InputText = ({text, onChange, disabled}) => {\n\n    return (\n        <textarea disabled={disabled} onChange={onChange} value={text} onPaste={(e) => e.preventDefault()}>\n\n        </textarea>\n    )\n}\n\nexport default InputText","import React from 'react'\n\nexport const Loader = ({loading, children}) => {\n    if (loading) {\n        return <div style={{margin: '0 auto', fontSize: 32}}>Loading ...</div>\n    }\n\n    return children\n}","import React from 'react'\n\nconst Stats = ({stats}) => {\n    return (\n        <div className={'stats'}>\n            {stats.length > 0 && (\n                <>\n                    {stats.map((stat) => <div key={stat}>{stat}</div>)}\n                    <p>You can see your stats by navigating to <a href=\"/stats\">stats</a></p>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Stats","import React, {useCallback, useEffect, useState} from 'react'\nimport Timer                                     from '../timer/Timer'\nimport './styles.scss'\nimport OutPutText                                from './Text'\nimport InputText                                 from './InputText'\nimport {Loader}                                  from '../../commons/Loader'\nimport {withAppContainer}                        from '../../withAppContainer'\nimport Stats                                     from './Stats'\n\nconst Board = ({appContainer}) => {\n\n    const [textMatchingStrategy, setTextMatchingStrategy] = useState()\n    const [loading, setLoading]                           = useState(true)\n    const [isTimerStarted, setTimerStarted]               = useState(false)\n    const [disabled, setDisabled]                         = useState(false)\n    const [text, setText]                                 = useState('')\n    const [progress, setProgress]                         = useState(0)\n    const [errorText, setErrorText]                       = useState('')\n    const [inputText, setInputText]                       = useState('')\n    const [stats, setStats]                               = useState([])\n    const [finishTime, setFinishTime]                     = useState(null)\n    const [finished, setFinished]                         = useState(false)\n\n    const matchingStrategyFactory = useCallback(appContainer.getMatchingStrategyFactory(), [])\n    const timeToComplete          = useCallback(appContainer.getTimeToComplete(), [finishTime])\n\n\n    useEffect(() => {\n        Promise.resolve().then(async () => {\n            const texts = await appContainer.getTextProvider().getText()\n            setText(texts)\n            setLoading(false)\n            setTextMatchingStrategy(matchingStrategyFactory.create(texts))\n        })\n    }, [appContainer, matchingStrategyFactory])\n\n\n    useEffect(() => {\n        if (textMatchingStrategy) {\n            const matchIndex = textMatchingStrategy.check(inputText)\n\n            setErrorText(inputText.substring(matchIndex, inputText.length))\n            setProgress(matchIndex)\n\n            if (matchIndex === text.length) {\n                setFinished(true)\n            }\n        }\n    }, [inputText, textMatchingStrategy, text.length])\n\n\n    const generateReport = async () => {\n        setLoading(true)\n        const analysers = appContainer.getAnalysers()\n\n        const results = []\n        const time    = finishTime === 0 ? timeToComplete : finishTime\n\n        analysers.forEach((analyser) => {\n            results.push(analyser.analyse(text, progress, inputText, time))\n        })\n\n        await appContainer.getStatsRepository().save(results)\n\n        setStats([...results])\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        if (finishTime !== null) {\n            generateReport().then(r => {\n            })\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [finishTime])\n\n\n    const reset = async () => {\n        setLoading(true)\n        const texts = await appContainer.textProvider.getText()\n        setText(texts)\n        setTextMatchingStrategy(matchingStrategyFactory.create(texts))\n        setTimerStarted(false)\n        setDisabled(false)\n        setProgress(0)\n        setErrorText('')\n        setInputText('')\n        setStats([])\n        setFinishTime(null)\n        setFinished(false)\n        setLoading(false)\n    }\n\n\n    const onInputTextChange = (e) => {\n\n        if (!isTimerStarted) {\n            setTimerStarted(true)\n        }\n        setInputText(e.target.value)\n    }\n\n\n    const onTimerFinish = (time) => {\n        setDisabled(true)\n        setFinishTime(timeToComplete - time)\n    }\n\n\n    return (\n        <div className={'board'}>\n            Welcome to TypeRacer\n            <Stats stats={stats}/>\n            {stats.length > 0 && <button onClick={reset}>Play again</button>}\n            <Timer\n                time={timeToComplete}\n                start={isTimerStarted}\n                finished={finished}\n                onFinish={onTimerFinish}/>\n            <Loader loading={loading}>\n                <div style={{opacity: errorText ? 1 : 0}} className={'textError'}>{errorText}</div>\n                <div className={'texts'}>\n                    <OutPutText text={text} progress={progress}/>\n                    <InputText text={inputText} onChange={onInputTextChange} disabled={disabled}/>\n                </div>\n            </Loader>\n        </div>\n    )\n}\n\nexport default withAppContainer(Board)","class TextProvider {\n\n    httpClient\n\n    constructor(httpClient) {\n        this.httpClient = httpClient\n    }\n\n    async getText() {\n        //const text = await this.httpClient.get('https://baconipsum.com/api/?type=meat-and-filler?paras=1')\n        return 'https https'//text.data.join('').substr(0, 10)\n    }\n}\n\nexport default TextProvider","class AppContainer {\n    textProvider\n    matchingStrategyFactory\n    analysers\n    statsRepository\n    userRepository\n    timeToComplete\n\n    constructor(textProvider, matchingStrategyFactory, analysers, statsRepository, userRepository, timeToComplete) {\n        this.textProvider            = textProvider\n        this.matchingStrategyFactory = matchingStrategyFactory\n        this.analysers               = analysers\n        this.statsRepository         = statsRepository\n        this.userRepository          = userRepository\n        this.timeToComplete          = timeToComplete\n    }\n\n    getTextProvider() {\n        return this.textProvider\n    }\n\n    getMatchingStrategyFactory() {\n        return this.matchingStrategyFactory\n    }\n\n    getAnalysers() {\n        return this.analysers\n    }\n\n    getStatsRepository() {\n        return this.statsRepository\n    }\n\n    getUserRepository() {\n        return this.userRepository\n    }\n\n    getTimeToComplete() {\n        return this.timeToComplete\n    }\n}\n\nexport default AppContainer","class PercentageAnalyser {\n    analyse(text, progress, inputText, finishTime) {\n        const completePercentage = (progress / text.length * 100).toFixed(1) + '%'\n        return 'The completeness\\'s percentage is  ' + completePercentage\n    }\n}\n\nexport default PercentageAnalyser","class WPMAnalyser {\n    analyse(text, progress, inputText, finishTime) {\n        const wpm = (progress / 5 / (finishTime / 1000 / 60)).toFixed(1)\n        return `Your WPM is ${wpm}`\n    }\n}\n\nexport default WPMAnalyser","class TextMatchingStrategy {\n\n    text\n\n    constructor(text) {\n        this.text  = text\n        this.check = this.check.bind(this)\n    }\n\n    check(input) {\n        if (input.length === 0) return 0\n\n        let matchEndIndex = 0\n\n        while (matchEndIndex < input.length && this.text.charAt(matchEndIndex) === input.charAt(matchEndIndex))\n            matchEndIndex++\n\n        return matchEndIndex\n    }\n}\n\nexport default TextMatchingStrategy","import TextMatchingStrategy from './TextMatchingStrategy'\n\nclass MatchingStrategyFactory {\n    create(text) {\n        return new TextMatchingStrategy(text)\n    }\n}\n\nexport default MatchingStrategyFactory","class Result {\n\n    error\n    data\n\n    constructor(data, error) {\n        this.data  = data\n        this.error = error\n    }\n}\n\nexport default Result","import Result from './Result'\n\nclass StatsRepository {\n\n    httpClient\n    userRepository\n\n    constructor(httpClient, userRepository) {\n        this.httpClient     = httpClient\n        this.userRepository = userRepository\n    }\n\n    async save(stats) {\n\n        const jsonData = await this.httpClient.get('https://api.myjson.com/bins/sk100')\n\n        const currentUser = jsonData.data.find(user => user.username === this.userRepository.get().username)\n\n        if (!currentUser.stats) {\n            currentUser.stats = []\n        }\n        currentUser.stats.push([...stats, new Date()])\n\n        const savedStats = await this.httpClient.put('https://api.myjson.com/bins/sk100', jsonData.data)\n\n        return new Result(savedStats.data, null)\n    }\n\n    async get() {\n        const jsonData = await this.httpClient.get('https://api.myjson.com/bins/sk100')\n        return new Result(jsonData.data, null)\n    }\n}\n\nexport default StatsRepository","import Result from './Result'\n\nclass UserRepository {\n\n    subscribers = []\n    isLoggedIn  = !!localStorage.getItem('user')\n    httpClient\n\n    constructor(httpClient) {\n        this.httpClient = httpClient\n    }\n\n    async login(username) {\n        const jsonData = await this.httpClient.get('https://api.myjson.com/bins/sk100')\n\n        if (jsonData.data.find(user => user.username === username)) {\n            this.isLoggedIn = true\n            localStorage.setItem('user', JSON.stringify({username: username}))\n            this.notify('loginChange', this.isLoggedIn)\n            return new Result({}, null)\n        }\n\n        return new Result(null, `username ${username} is not correct`)\n    }\n\n    async register(username) {\n        const jsonData = await this.httpClient.get('https://api.myjson.com/bins/sk100')\n\n        if (jsonData.data.find(user => user.username === username)) {\n            return new Result(null, `username ${username} already exists`)\n        }\n\n        const response = await this.httpClient.put('https://api.myjson.com/bins/sk100', [\n            ...jsonData.data,\n            {username: username}\n        ])\n\n        return new Result(response.data, null)\n    }\n\n    logout() {\n        localStorage.removeItem('user')\n        this.isLoggedIn = false\n        this.notify('loginChange', this.isLoggedIn)\n    }\n\n    get() {\n        return JSON.parse(localStorage.getItem('user'))\n    }\n\n    notify(event, data) {\n        this.subscribers[event] && this.subscribers[event].forEach(func => {\n            func(data)\n        })\n    }\n\n    subscribe(event, func) {\n        if (!this.subscribers[event]) {\n            this.subscribers[event] = new Map()\n        }\n\n        this.subscribers[event].set(func.toString(), func)\n\n        return () => this.subscribers[event].delete(func.toString())\n    }\n}\n\nexport default UserRepository","import React, {useState}  from 'react'\nimport {useHistory}       from 'react-router'\nimport {withAppContainer} from '../../withAppContainer'\n\nconst Register = ({appContainer}) => {\n\n    const [username, setUsername] = useState(null)\n    const [error, setError]       = useState(null)\n    const history                 = useHistory()\n\n    const register = async () => {\n        if (!username) {\n            return\n        }\n        const result = await appContainer.getUserRepository().register(username)\n        if (result.error) {\n            setError(result.error)\n            return\n        }\n        history.push('/login')\n\n    }\n\n    const onChange = (e) => {\n        setUsername(e.target.value)\n    }\n\n    return (\n        <div className={'auth'}>\n            <input type=\"text\" onChange={onChange} placeholder={'type your username'}/>\n            <button onClick={register}>Register</button>\n            <a href={'/login'}> or Login</a>\n            {error && <div style={{color: 'red'}}>{error}</div>}\n        </div>\n    )\n}\n\nexport default withAppContainer(Register)","import React, {useState}  from 'react'\nimport {withAppContainer} from '../../withAppContainer'\n\nconst Login = ({appContainer}) => {\n    const [username, setUsername] = useState(null)\n    const [error, setError]       = useState(null)\n\n    const login = async () => {\n        if (!username) {\n            return\n        }\n        const userRepo = appContainer.getUserRepository()\n        const result   = await userRepo.login(username)\n        if (result.error) {\n            setError(result.error)\n        }\n    }\n\n    const onChange = (e) => {\n        setUsername(e.target.value)\n    }\n\n    return (\n        <div className={'auth'}>\n            <input type=\"text\" onChange={onChange}/>\n            <button onClick={login}>Login</button>\n            <a href={'/register'}> or Register</a>\n            {error && <div style={{color: 'red'}}>{error}</div>}\n        </div>\n    )\n}\n\nexport default withAppContainer(Login)","import React              from 'react'\nimport {Redirect, Route}  from 'react-router'\nimport {withAppContainer} from '../withAppContainer'\n\nconst PrivateRoute = ({children, appContainer, path}) => {\n\n    if (appContainer.getUserRepository().isLoggedIn) {\n        return <Route path={path} component={() => children}/>\n    }\n\n    return <Redirect to={'/login'}/>\n}\n\nexport default withAppContainer(PrivateRoute)","import React, {useEffect, useState} from 'react'\nimport {withAppContainer}           from '../../withAppContainer'\n\nconst Stats = ({appContainer}) => {\n\n    const [stats, setStats] = useState(null)\n\n    useEffect(() => {\n\n        const statsRepository = appContainer.getStatsRepository()\n\n        Promise.resolve().then(async () => {\n            const allStats  = await statsRepository.get()\n            const userStats = allStats.data.find(user => user.username === appContainer.getUserRepository().get().username)\n\n            setStats(\n                userStats\n            )\n        })\n\n    }, [appContainer])\n\n    return (\n        <div style={{margin: '0 auto', width: 800}}>\n            {stats && (\n                <>\n                    <h1>{stats.username}</h1>\n                    {stats.stats.map((stat, key) => {\n                        return (\n                            <div key={key} style={{marginBottom: 8}}>\n                                {stat.map((st, key) => <div\n                                    key={st}>{key === stat.length - 1 ? (new Date(st)).toString() : st}</div>)}\n                            </div>\n                        )\n                    })}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default withAppContainer(Stats)","import React              from 'react'\nimport {Redirect, Route}  from 'react-router'\nimport {withAppContainer} from '../withAppContainer'\n\nconst PublicRoute = ({children, appContainer, path}) => {\n\n    if (!appContainer.getUserRepository().isLoggedIn) {\n        return <Route path={path} component={() => children}/>\n    }\n\n    return <Redirect to={'/board'}/>\n}\n\nexport default withAppContainer(PublicRoute)","import React, {useEffect, useState}                      from 'react'\nimport axios                                             from 'axios'\nimport {BrowserRouter as Router, Link, Redirect, Switch} from 'react-router-dom'\nimport Board                                             from './components/board/Board'\nimport TextProvider                                      from './app/TextProvider'\nimport AppContainer                                      from './app/AppContainer'\nimport {AppContainerCtx}                                 from './withAppContainer'\nimport PercentageAnalyser                                from './app/PercentageAnalyser'\nimport WPMAnalyser                                       from './app/WPMAnalyser'\nimport MatchingStrategyFactory                           from './app/MatchingStrategyFactory'\nimport StatsRepository                                   from './app/StatsRepository'\nimport UserRepository                                    from './app/UserRepository'\nimport Register                                          from './components/auth/Register'\nimport Login                                             from './components/auth/Login'\nimport PrivateRoute                                      from './commons/PrivateRoute'\nimport Stats                                             from './components/stats/Stats'\nimport PublicRoute                                       from './commons/PublicRoute'\nimport './index.css'\n\nconst timeFromUrl = new URL(window.location).searchParams.get('time')\n\nconst TIME_TO_COMPLETE = timeFromUrl ? timeFromUrl : 180_000\n\nfunction App() {\n\n\n    const textProvider    = new TextProvider(axios)\n    const userRepository  = new UserRepository(axios)\n    const statsRepository = new StatsRepository(axios, userRepository)\n\n    const appContainer = new AppContainer(\n        textProvider,\n        new MatchingStrategyFactory(),\n        [new PercentageAnalyser(), new WPMAnalyser()],\n        statsRepository,\n        userRepository,\n        TIME_TO_COMPLETE,\n    )\n\n    const [, setLoggedIn] = useState(userRepository.isLoggedIn)\n\n    useEffect(() => {\n        userRepository.subscribe('loginChange', (loginState) => {\n            setLoggedIn(loginState)\n        })\n    }, [userRepository])\n\n    return (\n        <Router>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    Type Racer\n                </header>\n                <nav>\n                    <ul>\n                        {!userRepository.isLoggedIn ? (\n                            <>\n                                <li>\n                                    <Link to=\"/login\">Login</Link>\n                                </li>\n                                <li>\n                                    <Link to=\"/register\">Register</Link>\n                                </li>\n                            </>\n                        ) : (\n                            <>\n                                <li>\n                                    <Link to=\"/board\">Board</Link>\n                                </li>\n                                <li>\n                                    <Link to=\"/stats\">Stats</Link>\n                                </li>\n                                <li onClick={() => {\n                                    userRepository.logout()\n                                }}>\n                                    Logout\n                                </li>\n                            </>\n                        )}\n                    </ul>\n                </nav>\n                <AppContainerCtx.Provider value={{\n                    appContainer,\n                }}>\n                    <Switch>\n                        <PrivateRoute path=\"/board\">\n                            <Board/>\n                        </PrivateRoute>\n                        <PrivateRoute path=\"/stats\">\n                            <Stats/>\n                        </PrivateRoute>\n                        <PublicRoute path=\"/register\">\n                            <Register/>\n                        </PublicRoute>\n                        <PublicRoute path=\"/login\">\n                            <Login/>\n                        </PublicRoute>\n                        <Redirect to={'/board'}/>\n                    </Switch>\n                </AppContainerCtx.Provider>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React              from 'react'\nimport ReactDOM           from 'react-dom'\nimport './index.css'\nimport App                from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}